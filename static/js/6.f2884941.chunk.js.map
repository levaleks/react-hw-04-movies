{"version":3,"sources":["components/Movies/_core/the-movie-db-api/TheMovieDBAPI.ts","components/Movies/Routes/MoviesPage/MoviesPage.sc.tsx","components/Movies/Routes/MoviesPage/MoviesPage.tsx","helpers/useQuery.ts"],"names":["axiosInstance","axios","create","theMovieDBAPI","constructor","httpClient","mediaType","timeWindow","data","this","get","process","searchParameters","searchParams","URLSearchParams","Object","entries","api_key","forEach","key","value","append","String","toString","movieId","params","SMoviesPage","styled","div","MoviesPage","queryParams","useLocation","search","history","useHistory","movies","setMovies","useState","inputVal","setInputVal","oldQuery","currentQuery","setQueries","useEffect","async","searchMovies","query","q","results","newQ","onSubmit","e","preventDefault","oldQ","target","trim","replace","push","name","type","autoComplete","onChange","map","id","title","original_title","originalTitle","to"],"mappings":"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","file":"static/js/6.f2884941.chunk.js","sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { MediaType, TimeWindow } from './abstracts/get-trending-request-options';\nimport { GetTrendingResponse } from './abstracts/GetTrendingResponse';\nimport { SearchParameters } from './abstracts/SearchParameters';\nimport { SearchResponse } from './abstracts/SearchResponse';\nimport { GetMovieDetailsParameters } from './abstracts/GetMovieDetailsParameters';\nimport { GetMovieDetailsResponse } from './abstracts/GetMovieDetailsResponse';\nimport { GetMovieCreditsResponse } from './abstracts/GetMovieCreditsResponse';\nimport { GetMovieReviewsParameters } from './abstracts/GetMovieReviewsParameters';\nimport { GetMovieReviewsResponse } from './abstracts/GetMovieReviewsResponse';\n\nexport class TheMovieDBAPI {\n    constructor(private httpClient: AxiosInstance) {}\n\n    async getTrending(mediaType: MediaType = 'all', timeWindow: TimeWindow = 'day'): Promise<GetTrendingResponse> {\n        const { data } = await this.httpClient.get<GetTrendingResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/trending/${mediaType}/${timeWindow}?api_key=${process.env.REACT_APP_TMDB_API_KEY}`,\n        );\n\n        return data;\n    }\n\n    async searchMovies(searchParameters: SearchParameters): Promise<SearchResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ api_key: `${process.env.REACT_APP_TMDB_API_KEY}`, ...searchParameters }).forEach(\n            ([key, value]) => {\n                searchParams.append(key, String(value));\n            },\n        );\n\n        const { data } = await this.httpClient.get<SearchResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/search/movie?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n\n    async getMovieDetails(movieId: number, params?: GetMovieDetailsParameters): Promise<GetMovieDetailsResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ api_key: `${process.env.REACT_APP_TMDB_API_KEY}`, ...params }).forEach(([key, value]) => {\n            searchParams.append(key, String(value));\n        });\n\n        const { data } = await this.httpClient.get<GetMovieDetailsResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/movie/${movieId}?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n\n    async getMovieCredits(movieId: number): Promise<GetMovieCreditsResponse> {\n        const { data } = await this.httpClient.get<GetMovieCreditsResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/movie/${movieId}/credits?api_key=${process.env.REACT_APP_TMDB_API_KEY}`,\n        );\n\n        return data;\n    }\n\n    async getMovieReviews(movieId: number, params?: GetMovieReviewsParameters): Promise<GetMovieReviewsResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ api_key: `${process.env.REACT_APP_TMDB_API_KEY}`, ...params }).forEach(([key, value]) => {\n            searchParams.append(key, String(value));\n        });\n\n        const { data } = await this.httpClient.get<GetMovieReviewsResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/movie/${movieId}/reviews?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n}\n\nconst axiosInstance = axios.create();\n\nexport const theMovieDBAPI = new TheMovieDBAPI(axiosInstance);\n","import styled from 'styled-components';\n\nexport const SMoviesPage = styled.div`\n    form {\n        display: flex;\n\n        input {\n            flex-grow: 1;\n            flex-shrink: 0;\n            margin-right: 15px;\n        }\n    }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { SMoviesPage } from './MoviesPage.sc';\nimport { useQuery } from '../../../../helpers/useQuery';\nimport { theMovieDBAPI } from '../../_core/the-movie-db-api/TheMovieDBAPI';\nimport { Movie } from '../../_core/the-movie-db-api/abstracts/SearchResponse';\n\nexport const MoviesPage: React.FC = () => {\n    const queryParams = useQuery();\n    const history = useHistory();\n    const [movies, setMovies] = useState<Movie[]>();\n    const [inputVal, setInputVal] = useState('');\n    const [[oldQuery, currentQuery], setQueries] = useState(['', '']);\n\n    const pushQuery = (q: string): void => {\n        history.push({ search: q ? `?query=${q}` : '' });\n    };\n\n    const handleSubmit = (e): void => {\n        e.preventDefault();\n\n        const oldQ = queryParams.get('query') ?? '';\n        const newQ: string = e.target.query.value.trim().replace(/\\s{2,}/g, ' ');\n\n        if (oldQ !== newQ) pushQuery(newQ);\n    };\n\n    useEffect(() => {\n        if (currentQuery) {\n            const searchMovies = async (q: string): Promise<void> => {\n                const data = await theMovieDBAPI.searchMovies({ query: q });\n\n                setMovies(data.results);\n            };\n\n            searchMovies(currentQuery);\n        }\n\n        if (oldQuery && !currentQuery) {\n            setMovies([]);\n            setQueries(['', '']);\n        }\n    }, [oldQuery, currentQuery]);\n\n    useEffect(() => {\n        const newQ = queryParams.get('query') ?? '';\n\n        if (newQ !== currentQuery) {\n            setQueries([currentQuery, newQ]);\n            setInputVal(newQ);\n        }\n    }, [queryParams, currentQuery]);\n\n    return (\n        <SMoviesPage>\n            <form onSubmit={handleSubmit}>\n                <input\n                    name=\"query\"\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    value={inputVal}\n                    onChange={(e): void => setInputVal(e.target.value)}\n                />\n\n                <button type=\"submit\">Search</button>\n            </form>\n\n            {movies && (\n                <ul>\n                    {movies.map(({ id, title, original_title: originalTitle }) => (\n                        <li key={id}>\n                            <Link to={`/movies/${id}`}>{title || originalTitle}</Link>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </SMoviesPage>\n    );\n};\n","import { useLocation } from 'react-router-dom';\n\nexport const useQuery = (): URLSearchParams => {\n    return new URLSearchParams(useLocation().search);\n};\n"],"sourceRoot":""}