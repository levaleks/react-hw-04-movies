{"version":3,"sources":["components/Movies/Movies.sc.tsx","components/Movies/Routes/Routes.tsx","components/Movies/Movies.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["SMovies","styled","div","SNav","nav","LazyHomePage","lazy","then","HomePage","default","LazyMoviesPage","MoviesPage","LazyMovieDetailsPage","MovieDetailsPage","LoaderIndicator","type","color","style","margin","height","width","Routes","exact","path","fallback","to","Movies","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"k/BAEO,MAAMA,EAAUC,IAAOC,IAAV,KAOPC,EAAOF,IAAOG,IAAV,K,4BCLjB,MAAMC,EAAeC,eAAK,IAAM,mDAAqBC,KAAK,EAAGC,eAAH,CAAqBC,QAASD,MAElFE,EAAiBJ,eAAK,IAAM,mDAAuBC,KAAK,EAAGI,iBAAH,CAAuBF,QAASE,MAExFC,EAAuBN,eAAK,IAC9B,mDAA6BC,KAAK,EAAGM,uBAAH,CAA6BJ,QAASI,MAG/DC,EAA4B,IACrC,kBAAC,IAAD,CAAWC,KAAK,YAAYC,MAAM,UAAUC,MAAO,CAAEC,OAAQ,UAAYC,OAAQ,GAAIC,MAAO,KAGnFC,EAAmB,IAExB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,WAAD,CAAUC,SAAU,kBAACV,EAAD,OAChB,kBAACT,EAAD,QAGR,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,WACd,kBAAC,WAAD,CAAUC,SAAU,kBAACV,EAAD,OAChB,kBAACJ,EAAD,QAGR,kBAAC,IAAD,CAAOa,KAAK,oBACR,kBAAC,WAAD,CAAUC,SAAU,kBAACV,EAAD,OAChB,kBAACF,EAAD,QAGR,kBAAC,IAAD,CAAUa,GAAG,OC7BZC,EAAmB,IAExB,kBAAC,IAAD,KACI,kBAAC1B,EAAD,KACI,kBAACG,EAAD,KACI,4BACI,4BACI,kBAAC,IAAD,CAASmB,OAAK,EAACG,GAAG,KAAlB,SAIJ,4BACI,kBAAC,IAAD,CAASA,GAAG,WAAZ,aAKZ,kBAACJ,EAAD,QCnBHM,EAAgB,IAClB,kBAACD,EAAD,MCSSE,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAACR,EAAD,OAEJS,SAASC,eAAe,SDwHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBjC,KAAMkC,IACHA,EAAaC,eAEhBC,MAAOC,IACJC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9a28714c.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const SMovies = styled.div`\n    display: flex;\n    flex-direction: column;\n    max-width: 600px;\n    margin: 30px auto 0;\n`;\n\nexport const SNav = styled.nav`\n    ul {\n        display: flex;\n        padding: 0 0 30px 0;\n        margin: 0 0 30px 0;\n        border-bottom: 1px solid #cccccc;\n        list-style: none;\n\n        li {\n            margin-right: 15px;\n\n            &:last-child {\n                margin-right: 0;\n            }\n\n            a {\n                text-decoration: none;\n\n                &.active,\n                &:hover {\n                    text-decoration: underline;\n                }\n            }\n        }\n    }\n`;\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport React, { lazy, Suspense } from 'react';\nimport Indicator from 'react-loader-spinner';\n\nconst LazyHomePage = lazy(() => import('./HomePage').then(({ HomePage }) => ({ default: HomePage })));\n\nconst LazyMoviesPage = lazy(() => import('./MoviesPage').then(({ MoviesPage }) => ({ default: MoviesPage })));\n\nconst LazyMovieDetailsPage = lazy(() =>\n    import('./MovieDetailsPage').then(({ MovieDetailsPage }) => ({ default: MovieDetailsPage })),\n);\n\nexport const LoaderIndicator: React.FC = () => (\n    <Indicator type=\"ThreeDots\" color=\"#CCCCCC\" style={{ margin: '0 auto' }} height={40} width={40} />\n);\n\nexport const Routes: React.FC = () => {\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n                <Suspense fallback={<LoaderIndicator />}>\n                    <LazyHomePage />\n                </Suspense>\n            </Route>\n            <Route exact path=\"/movies\">\n                <Suspense fallback={<LoaderIndicator />}>\n                    <LazyMoviesPage />\n                </Suspense>\n            </Route>\n            <Route path=\"/movies/:movieId\">\n                <Suspense fallback={<LoaderIndicator />}>\n                    <LazyMovieDetailsPage />\n                </Suspense>\n            </Route>\n            <Redirect to=\"/\" />\n        </Switch>\n    );\n};\n","import React from 'react';\nimport { HashRouter, NavLink } from 'react-router-dom';\nimport { SMovies, SNav } from './Movies.sc';\nimport { Routes } from './Routes';\n\nexport const Movies: React.FC = () => {\n    return (\n        <HashRouter>\n            <SMovies>\n                <SNav>\n                    <ul>\n                        <li>\n                            <NavLink exact to=\"/\">\n                                Home\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/movies\">Movies</NavLink>\n                        </li>\n                    </ul>\n                </SNav>\n\n                <Routes />\n            </SMovies>\n        </HashRouter>\n    );\n};\n","import React from 'react';\nimport { Movies } from '../Movies';\n\nexport const App: React.FC = () => {\n    return <Movies />;\n};\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}