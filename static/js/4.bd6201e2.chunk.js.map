{"version":3,"sources":["components/Movies/_core/the-movie-db-api/TheMovieDBAPI.ts","components/Movies/Routes/HomePage/HomePage.sc.tsx","components/Movies/Routes/HomePage/HomePage.tsx"],"names":["axiosInstance","axios","create","theMovieDBAPI","constructor","httpClient","mediaType","timeWindow","data","this","get","process","searchParameters","searchParams","URLSearchParams","Object","entries","api_key","forEach","key","value","append","String","toString","movieId","params","SHomePage","styled","div","HomePage","trends","setTrends","useState","useEffect","async","results","getTrending","map","id","title","original_title","originalTitle","name","to"],"mappings":"+HAAA,uDA2EA,MAAMA,EAAgBC,IAAMC,SAEfC,EAAgB,IAlEtB,MACHC,YAAoBC,GAA4B,KAA5BA,aAEpB,kBAAkBC,EAAuB,MAAOC,EAAyB,OACrE,MAAM,KAAEC,SAAeC,KAAKJ,WAAWK,IAAhB,UAChBC,+BADgB,qBAC+BL,EAD/B,YAC4CC,EAD5C,oBACkEI,qCAGzF,OAAOH,EAGX,mBAAmBI,GACf,MAAMC,EAAe,IAAIC,gBAEzBC,OAAOC,QAAQ,CAAEC,QAAQ,GAAD,OAAKN,uCAAyCC,IAAoBM,QACtF,EAAEC,EAAKC,MACHP,EAAaQ,OAAOF,EAAKG,OAAOF,MAIxC,MAAM,KAAEZ,SAAeC,KAAKJ,WAAWK,IAAhB,UAChBC,+BADgB,yBACmCE,EAAaU,aAGvE,OAAOf,EAGX,sBAAsBgB,EAAiBC,GACnC,MAAMZ,EAAe,IAAIC,gBAEzBC,OAAOC,QAAQ,CAAEC,QAAQ,GAAD,OAAKN,uCAAyCc,IAAUP,QAAQ,EAAEC,EAAKC,MAC3FP,EAAaQ,OAAOF,EAAKG,OAAOF,MAGpC,MAAM,KAAEZ,SAAeC,KAAKJ,WAAWK,IAAhB,UAChBC,+BADgB,kBAC4Ba,EAD5B,YACuCX,EAAaU,aAG3E,OAAOf,EAGX,sBAAsBgB,GAClB,MAAM,KAAEhB,SAAeC,KAAKJ,WAAWK,IAAhB,UAChBC,+BADgB,kBAC4Ba,EAD5B,4BACuDb,qCAG9E,OAAOH,EAGX,sBAAsBgB,EAAiBC,GACnC,MAAMZ,EAAe,IAAIC,gBAEzBC,OAAOC,QAAQ,CAAEC,QAAQ,GAAD,OAAKN,uCAAyCc,IAAUP,QAAQ,EAAEC,EAAKC,MAC3FP,EAAaQ,OAAOF,EAAKG,OAAOF,MAGpC,MAAM,KAAEZ,SAAeC,KAAKJ,WAAWK,IAAhB,UAChBC,+BADgB,kBAC4Ba,EAD5B,oBAC+CX,EAAaU,aAGnF,OAAOf,IAMgCR,I,qOC3ExC,MAAM0B,E,MAAYC,EAAOC,IAAV,K,YCIf,MAAMC,EAAqB,KAC9B,MAAOC,EAAQC,GAAaC,qBAY5B,OAVAC,oBAAU,KACcC,WAChB,MAAM,QAAEC,SAAkBhC,IAAciC,cAExCL,EAAUI,IAGdC,IACD,IAGC,kBAACV,EAAD,KACI,8CAECI,GACG,4BACKA,EAAOO,IAAI,EAAGC,KAAIC,QAAOC,eAAgBC,EAAeC,UACrD,wBAAIvB,IAAKmB,GACL,kBAAC,IAAD,CAAMK,GAAE,kBAAaL,IAAOC,GAASG,GAAQD","file":"static/js/4.bd6201e2.chunk.js","sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { MediaType, TimeWindow } from './abstracts/get-trending-request-options';\nimport { GetTrendingResponse } from './abstracts/GetTrendingResponse';\nimport { SearchParameters } from './abstracts/SearchParameters';\nimport { SearchResponse } from './abstracts/SearchResponse';\nimport { GetMovieDetailsParameters } from './abstracts/GetMovieDetailsParameters';\nimport { GetMovieDetailsResponse } from './abstracts/GetMovieDetailsResponse';\nimport { GetMovieCreditsResponse } from './abstracts/GetMovieCreditsResponse';\nimport { GetMovieReviewsParameters } from './abstracts/GetMovieReviewsParameters';\nimport { GetMovieReviewsResponse } from './abstracts/GetMovieReviewsResponse';\n\nexport class TheMovieDBAPI {\n    constructor(private httpClient: AxiosInstance) {}\n\n    async getTrending(mediaType: MediaType = 'all', timeWindow: TimeWindow = 'day'): Promise<GetTrendingResponse> {\n        const { data } = await this.httpClient.get<GetTrendingResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/trending/${mediaType}/${timeWindow}?api_key=${process.env.REACT_APP_TMDB_API_KEY}`,\n        );\n\n        return data;\n    }\n\n    async searchMovies(searchParameters: SearchParameters): Promise<SearchResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ api_key: `${process.env.REACT_APP_TMDB_API_KEY}`, ...searchParameters }).forEach(\n            ([key, value]) => {\n                searchParams.append(key, String(value));\n            },\n        );\n\n        const { data } = await this.httpClient.get<SearchResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/search/movie?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n\n    async getMovieDetails(movieId: number, params?: GetMovieDetailsParameters): Promise<GetMovieDetailsResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ api_key: `${process.env.REACT_APP_TMDB_API_KEY}`, ...params }).forEach(([key, value]) => {\n            searchParams.append(key, String(value));\n        });\n\n        const { data } = await this.httpClient.get<GetMovieDetailsResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/movie/${movieId}?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n\n    async getMovieCredits(movieId: number): Promise<GetMovieCreditsResponse> {\n        const { data } = await this.httpClient.get<GetMovieCreditsResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/movie/${movieId}/credits?api_key=${process.env.REACT_APP_TMDB_API_KEY}`,\n        );\n\n        return data;\n    }\n\n    async getMovieReviews(movieId: number, params?: GetMovieReviewsParameters): Promise<GetMovieReviewsResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ api_key: `${process.env.REACT_APP_TMDB_API_KEY}`, ...params }).forEach(([key, value]) => {\n            searchParams.append(key, String(value));\n        });\n\n        const { data } = await this.httpClient.get<GetMovieReviewsResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/movie/${movieId}/reviews?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n}\n\nconst axiosInstance = axios.create();\n\nexport const theMovieDBAPI = new TheMovieDBAPI(axiosInstance);\n","import styled from 'styled-components';\n\nexport const SHomePage = styled.div`\n    h2 {\n        margin-top: 0;\n    }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { SHomePage } from './HomePage.sc';\nimport { theMovieDBAPI } from '../../_core/the-movie-db-api/TheMovieDBAPI';\nimport { GetTrendingResult } from '../../_core/the-movie-db-api/abstracts/GetTrendingResponse';\n\nexport const HomePage: React.FC = () => {\n    const [trends, setTrends] = useState<GetTrendingResult[]>();\n\n    useEffect(() => {\n        const getTrending = async (): Promise<void> => {\n            const { results } = await theMovieDBAPI.getTrending();\n\n            setTrends(results);\n        };\n\n        getTrending();\n    }, []);\n\n    return (\n        <SHomePage>\n            <h2>Trending today</h2>\n\n            {trends && (\n                <ul>\n                    {trends.map(({ id, title, original_title: originalTitle, name }) => (\n                        <li key={id}>\n                            <Link to={`/movies/${id}`}>{title || name || originalTitle}</Link>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </SHomePage>\n    );\n};\n"],"sourceRoot":""}