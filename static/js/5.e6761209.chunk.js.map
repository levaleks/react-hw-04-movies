{"version":3,"sources":["components/Movies/_core/the-movie-db-api/TheMovieDBAPI.ts","components/Movies/Routes/MovieDetailsPage/MovieDetailsPage.sc.tsx","components/Movies/Routes/MovieDetailsPage/MovieDetailsCard/MovieDetailsCard.sc.ts","components/Movies/Routes/MovieDetailsPage/MovieDetailsCard/MovieDetailsCard.tsx","components/Movies/Routes/MovieDetailsPage/Reviews/Reviews.sc.tsx","components/Movies/Routes/MovieDetailsPage/Reviews/ReviewCard/ReviewCard.sc.tsx","components/Movies/Routes/MovieDetailsPage/Reviews/ReviewCard/ReviewCard.tsx","components/Movies/Routes/MovieDetailsPage/Reviews/Reviews.tsx","components/Movies/Routes/MovieDetailsPage/Cast/Cast.sc.tsx","components/Movies/Routes/MovieDetailsPage/Cast/ActorCard/ActorCard.sc.tsx","components/Movies/Routes/MovieDetailsPage/Cast/ActorCard/ActorCard.tsx","components/Movies/Routes/MovieDetailsPage/Cast/Cast.tsx","components/Movies/Routes/MovieDetailsPage/MovieDetailsPage.tsx"],"names":["axiosInstance","axios","create","theMovieDBAPI","constructor","httpClient","mediaType","timeWindow","data","this","get","process","searchParameters","searchParams","URLSearchParams","Object","entries","api_key","forEach","key","value","append","String","toString","movieId","params","SMovieDetailsPage","styled","div","SBackButton","button","SDetailsNav","ul","SMovieDetailsCard","article","MovieDetailsCard","title","posterUrl","overview","genres","src","alt","SReviews","SReviewCard","ReviewCard","authorName","review","Reviews","reviews","setReviews","useState","useParams","useEffect","async","results","getMovieReviews","Number","Boolean","length","map","id","author","content","SCast","SActorCard","ActorCard","photoUrl","name","character","Cast","cast","setCast","getMovieCredits","profile_path","profilePath","MovieDetailsPage","history","useHistory","movieDetails","setMovieDetails","path","url","useRouteMatch","details","getMovieDetails","type","onClick","goBack","original_title","poster_path","join","to"],"mappings":"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","file":"static/js/5.e6761209.chunk.js","sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { MediaType, TimeWindow } from './abstracts/get-trending-request-options';\nimport { GetTrendingResponse } from './abstracts/GetTrendingResponse';\nimport { SearchParameters } from './abstracts/SearchParameters';\nimport { SearchResponse } from './abstracts/SearchResponse';\nimport { GetMovieDetailsParameters } from './abstracts/GetMovieDetailsParameters';\nimport { GetMovieDetailsResponse } from './abstracts/GetMovieDetailsResponse';\nimport { GetMovieCreditsResponse } from './abstracts/GetMovieCreditsResponse';\nimport { GetMovieReviewsParameters } from './abstracts/GetMovieReviewsParameters';\nimport { GetMovieReviewsResponse } from './abstracts/GetMovieReviewsResponse';\n\nexport class TheMovieDBAPI {\n    constructor(private httpClient: AxiosInstance) {}\n\n    async getTrending(mediaType: MediaType = 'all', timeWindow: TimeWindow = 'day'): Promise<GetTrendingResponse> {\n        const { data } = await this.httpClient.get<GetTrendingResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/trending/${mediaType}/${timeWindow}?api_key=${process.env.REACT_APP_TMDB_API_KEY}`,\n        );\n\n        return data;\n    }\n\n    async searchMovies(searchParameters: SearchParameters): Promise<SearchResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ api_key: `${process.env.REACT_APP_TMDB_API_KEY}`, ...searchParameters }).forEach(\n            ([key, value]) => {\n                searchParams.append(key, String(value));\n            },\n        );\n\n        const { data } = await this.httpClient.get<SearchResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/search/movie?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n\n    async getMovieDetails(movieId: number, params?: GetMovieDetailsParameters): Promise<GetMovieDetailsResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ api_key: `${process.env.REACT_APP_TMDB_API_KEY}`, ...params }).forEach(([key, value]) => {\n            searchParams.append(key, String(value));\n        });\n\n        const { data } = await this.httpClient.get<GetMovieDetailsResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/movie/${movieId}?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n\n    async getMovieCredits(movieId: number): Promise<GetMovieCreditsResponse> {\n        const { data } = await this.httpClient.get<GetMovieCreditsResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/movie/${movieId}/credits?api_key=${process.env.REACT_APP_TMDB_API_KEY}`,\n        );\n\n        return data;\n    }\n\n    async getMovieReviews(movieId: number, params?: GetMovieReviewsParameters): Promise<GetMovieReviewsResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ api_key: `${process.env.REACT_APP_TMDB_API_KEY}`, ...params }).forEach(([key, value]) => {\n            searchParams.append(key, String(value));\n        });\n\n        const { data } = await this.httpClient.get<GetMovieReviewsResponse>(\n            `${process.env.REACT_APP_TMDB_API_URL}/movie/${movieId}/reviews?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n}\n\nconst axiosInstance = axios.create();\n\nexport const theMovieDBAPI = new TheMovieDBAPI(axiosInstance);\n","import styled from 'styled-components';\n\nexport const SMovieDetailsPage = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const SBackButton = styled.button`\n    width: max-content;\n    margin-bottom: 10px;\n    background: none;\n    border: 0;\n    cursor: pointer;\n`;\n\nexport const SDetailsNav = styled.ul`\n    padding: 0;\n    list-style: none;\n    display: flex;\n\n    li {\n        margin-right: 15px;\n\n        &:last-child {\n            margin-right: 0;\n        }\n    }\n\n    a {\n        text-decoration: none;\n\n        &.active,\n        &:hover {\n            text-decoration: underline;\n        }\n    }\n`;\n","import styled from 'styled-components';\n\nexport const SMovieDetailsCard = styled.article`\n    display: flow-root;\n\n    img {\n        float: left;\n        margin-right: 20px;\n        width: 300px;\n        height: 450px;\n    }\n\n    > * {\n        margin-top: 0;\n    }\n`;\n","import React from 'react';\nimport { SMovieDetailsCard } from './MovieDetailsCard.sc';\n\nexport type MovieDetailsCard = {\n    title: string;\n    posterUrl: string;\n    overview: string;\n    genres: string;\n};\n\nexport const MovieDetailsCard: React.FC<MovieDetailsCard> = ({ title, posterUrl, overview, genres }) => {\n    return (\n        <SMovieDetailsCard>\n            <img src={posterUrl} alt={title} />\n\n            <h2>{title}</h2>\n\n            <h3>Overview</h3>\n\n            <p>{overview}</p>\n\n            <h3>Genres</h3>\n\n            <p>{genres}</p>\n        </SMovieDetailsCard>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SReviews = styled.div`\n    ul {\n        padding: 0;\n        list-style: none;\n\n        li + li {\n            margin-top: 15px;\n        }\n    }\n`;\n","import styled from 'styled-components';\n\nexport const SReviewCard = styled.div``;\n","import React from 'react';\nimport { SReviewCard } from './ReviewCard.sc';\n\nexport type ReviewCardProps = {\n    authorName: string;\n    review: string;\n};\n\nexport const ReviewCard: React.FC<ReviewCardProps> = ({ authorName, review }) => {\n    return (\n        <SReviewCard>\n            <h4>Author: {authorName}</h4>\n            <p>{review}</p>\n        </SReviewCard>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { SReviews } from './Reviews.sc';\nimport { theMovieDBAPI } from '../../../_core/the-movie-db-api/TheMovieDBAPI';\nimport { Review } from '../../../_core/the-movie-db-api/abstracts/GetMovieReviewsResponse';\nimport { ReviewCard } from './ReviewCard';\n\nexport const Reviews: React.FC = () => {\n    const [reviews, setReviews] = useState<Review[]>();\n    const { movieId } = useParams<{ movieId: string }>();\n\n    useEffect(() => {\n        const getMovieReviews = async (): Promise<void> => {\n            const { results } = await theMovieDBAPI.getMovieReviews(Number(movieId));\n\n            setReviews(results);\n        };\n\n        getMovieReviews();\n    }, [movieId]);\n\n    return (\n        <SReviews>\n            {reviews && Boolean(reviews.length) && (\n                <ul>\n                    {reviews.map(({ id, author, content }) => (\n                        <li key={id}>\n                            <ReviewCard authorName={author} review={content} />\n                        </li>\n                    ))}\n                </ul>\n            )}\n\n            {reviews && !reviews.length && <p>We don&apos;t have any reviews for this movie.</p>}\n        </SReviews>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SCast = styled.div`\n    ul {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        grid-row-gap: 15px;\n        padding: 0;\n        list-style: none;\n    }\n\n    img {\n        display: block;\n        width: 138px;\n        height: 175px;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const SActorCard = styled.div``;\n","import React from 'react';\nimport { SActorCard } from './ActorCard.sc';\n\nexport type ActorCardProps = {\n    photoUrl: string;\n    name: string;\n    character: string;\n};\n\nexport const ActorCard: React.FC<ActorCardProps> = ({ photoUrl, name, character }) => {\n    return (\n        <SActorCard>\n            <img src={photoUrl} alt={name} />\n            <p>{name}</p>\n            Сharacter: <span>{character}</span>\n        </SActorCard>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { SCast } from './Cast.sc';\nimport { theMovieDBAPI } from '../../../_core/the-movie-db-api/TheMovieDBAPI';\nimport { Actor } from '../../../_core/the-movie-db-api/abstracts/GetMovieCreditsResponse';\nimport { ActorCard } from './ActorCard';\n\nexport const Cast: React.FC = () => {\n    const [cast, setCast] = useState<Actor[]>();\n    const { movieId } = useParams<{ movieId: string }>();\n\n    useEffect(() => {\n        const getMovieCredits = async (): Promise<void> => {\n            const data = await theMovieDBAPI.getMovieCredits(Number(movieId));\n\n            setCast(data.cast);\n        };\n\n        getMovieCredits();\n    }, [movieId]);\n\n    return (\n        <SCast>\n            {cast && (\n                <ul>\n                    {cast.map(({ id, name, character, profile_path: profilePath }) => (\n                        <li key={id}>\n                            <ActorCard\n                                photoUrl={`${process.env.REACT_APP_TMDB_IMG_URL}/t/p/w138_and_h175_face${profilePath}`}\n                                name={name}\n                                character={character}\n                            />\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </SCast>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Switch, Route, useRouteMatch, useHistory, NavLink } from 'react-router-dom';\nimport { SBackButton, SDetailsNav, SMovieDetailsPage } from './MovieDetailsPage.sc';\nimport { theMovieDBAPI } from '../../_core/the-movie-db-api/TheMovieDBAPI';\nimport { GetMovieDetailsResponse } from '../../_core/the-movie-db-api/abstracts/GetMovieDetailsResponse';\nimport { MovieDetailsCard } from './MovieDetailsCard/MovieDetailsCard';\nimport { Reviews } from './Reviews';\nimport { Cast } from './Cast';\n\nexport const MovieDetailsPage: React.FC = () => {\n    const history = useHistory();\n    const [movieDetails, setMovieDetails] = useState<GetMovieDetailsResponse>();\n    const { movieId } = useParams<{ movieId: string }>();\n    const { path, url } = useRouteMatch();\n\n    useEffect(() => {\n        const getMovieDetails = async (): Promise<void> => {\n            const details = await theMovieDBAPI.getMovieDetails(Number(movieId));\n\n            setMovieDetails(details);\n        };\n\n        getMovieDetails();\n    }, [movieId]);\n\n    return (\n        <SMovieDetailsPage>\n            <SBackButton type=\"button\" onClick={(): void => history.goBack()}>\n                ← Back\n            </SBackButton>\n\n            {movieDetails && (\n                <MovieDetailsCard\n                    title={movieDetails.title || movieDetails.original_title}\n                    posterUrl={`${process.env.REACT_APP_TMDB_IMG_URL}/t/p/w300_and_h450_bestv2${movieDetails.poster_path}`}\n                    overview={movieDetails.overview}\n                    genres={movieDetails.genres.map(({ name }) => name).join(', ')}\n                />\n            )}\n\n            <SDetailsNav>\n                <li>\n                    <NavLink to={`${url}/cast`}>Cast</NavLink>\n                </li>\n                <li>\n                    <NavLink to={`${url}/reviews`}>Reviews</NavLink>\n                </li>\n            </SDetailsNav>\n\n            <Switch>\n                <Route path={`${path}/cast`}>\n                    <Cast />\n                </Route>\n                <Route path={`${path}/reviews`}>\n                    <Reviews />\n                </Route>\n            </Switch>\n        </SMovieDetailsPage>\n    );\n};\n"],"sourceRoot":""}